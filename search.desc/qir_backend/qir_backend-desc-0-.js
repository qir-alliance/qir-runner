searchState.loadedDescShard("qir_backend", 0, "QIR compliant backend for quantum simulation.\nHolds output messages from calls to the QIR output …\nQIR API for checking internal simulator state and …\nQIR API for checking internal simulator state and …\nQIR API for performing the CCNOT gate with the given …\nQIR API for performing the CNOT gate with the given qubits.\nQIR API for performing the CNOT gate with the given qubits.\nQIR API for performing the CY gate with the given qubits.\nQIR API for performing the CZ gate with the given qubits.\nQIR API for dumping full internal simulator state.\nQIR API for performing the H gate on the given qubit.\nQIR API for performing the multicontrolled H gate with the …\nQIR API that measures a given qubit in the computational …\nQIR API that performs joint measurement of the given …\nQIR API for measuring the given qubit and storing the …\nQIR API for measuring the given qubit in the computation …\nQIR API for applying an adjoint rotation about the given …\nQIR API for applying a rotation about the given Pauli axis …\nQIR API for applying a controlled rotation about the given …\nQIR API for applying an adjoint controlled rotation about …\nQIR API that reads the Boolean value corresponding to the …\nQIR API for resetting the given qubit in the computational …\nQIR API for applying a Pauli-X rotation with the given …\nQIR API for applying a multicontrolled Pauli-X rotation …\nQIR API for applying a joint rotation Pauli-Y rotation …\nQIR API for applying a Pauli-Y rotation with the given …\nQIR API for applying a multicontrolled Pauli-Y rotation …\nQIR API for applying a joint rotation Pauli-Y rotation …\nQIR API for applying a Pauli-Z rotation with the given …\nQIR API for applying a multicontrolled Pauli-Z rotation …\nQIR API for applying a joint rotation Pauli-Z rotation …\nQIR API for performing the Adjoint S gate on the given …\nQIR API for performing the S gate on the given qubit.\nQIR API for performing the multicontrolled S gate with the …\nQIR API for performing the multicontrolled Adjoint S gate …\nQIR API for applying a SWAP gate to the given qubits.\nQIR API for performing the Adjoint T gate on the given …\nQIR API for performing the T gate on the given qubit.\nQIR API for performing the multicontrolled T gate with the …\nQIR API for performing the multicontrolled Adjoint T gate …\nQIR API for performing the X gate on the given qubit.\nQIR API for performing the multicontrolled X gate with the …\nQIR API for performing the Y gate on the given qubit.\nQIR API for performing the multicontrolled Y gate with the …\nQIR API for performing the Z gate on the given qubit.\nQIR API for performing the multicontrolled Z gate with the …\nInserts a marker in the generated output that indicates the\nInitializes the execution environment.\nQIR API that allocates the next available qubit in the …\nQIR API for allocating the given number of qubits in the …\nQIR API for releasing the given qubit from the simulation.\nQIR API for releasing the given runtime managed qubit …\nQIR API for getting the string interpretation of a qubit …\nQIR API for recording the given result into the program …\nInserts a marker in the generated output that indicates the\nRust API for getting a snapshot of current quantum state. …\nDrains the buffer and returns the contents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRust API for checking internal simulator state and …\nRecords a value to the output.\nRecords a string to the output.\nSets the seed for the pseudo-random number generator used …\nSets whether the output should be written to stdout or …\nWrites the newline char(s) to the output.\nQIR API for applying an adjoint exponential of a …\nQIR API for applying an exponential of a multi-qubit …\nQIR API for applying an exponential of a multi-qubit …\nQIR API for applying an exponential of a multi-qubit …\nHolds output messages from calls to the QIR output …\nInserts a marker in the generated output that indicates the\nInserts a marker in the generated output that indicates the\nRecords a value to the output.\nRecords a string to the output.\nPanics")